---
import "../styles/globals.css";
import { withBase } from "../utils/url.js";

const navSections = [
  { id: "home", label: "Home" },
  { id: "about", label: "About" },
  { id: "projects", label: "Projects" },
  { id: "games", label: "Games" },
  { id: "contact", label: "Contact" },
];

const navLinks = navSections.map((section) => ({
  ...section,
  href: withBase(`/#${section.id}`),
}));
---
<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{Astro.props.title ?? "Yefta Kun | Personal Site"}</title>
    <meta name="description" content={Astro.props.description ?? "Portofolio personal, catatan proyek, dan lap time Assetto Corsa."} />
    <meta property="og:title" content={Astro.props.title ?? "Yefta Kun | Personal Site"} />
    <meta property="og:description" content={Astro.props.description ?? "Portofolio personal, catatan proyek, dan lap time Assetto Corsa."} />
    <meta property="og:image" content={Astro.props.image ?? withBase("/social.png")} />
    <meta name="theme-color" content="#2a5bff" />
    <script is:inline>
      (() => {
        const root = document.documentElement;
        const storedTheme = localStorage.getItem("theme");
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        if (storedTheme === "dark" || (!storedTheme && prefersDark)) {
          root.classList.add("dark");
        } else {
          root.classList.remove("dark");
        }
      })();
    </script>
  </head>
  <body class="min-h-screen bg-[var(--bg)] text-[var(--text)] font-sans">
    <header class="sticky top-0 z-30 border-b border-[var(--border)] bg-[color-mix(in srgb,var(--bg) 75%,transparent)] backdrop-blur">
      <div class="mx-auto flex max-w-5xl items-center justify-between px-6 py-4">
        <a href={withBase("/")} class="flex items-center gap-3 font-semibold">
          <span class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-[var(--primary)] text-white">
            YK
          </span>
          <span class="hidden text-sm text-muted sm:block">Yefta Kun</span>
        </a>
        <nav class="hidden items-center gap-6 text-sm md:flex">
          {navLinks.map((link, index) => (
            <a
              href={link.href}
              data-nav-link
              data-section-id={link.id}
              class={`nav-link ${index === 0 ? "is-active" : ""}`.trim()}
              aria-current={index === 0 ? "true" : "false"}
            >
              {link.label}
            </a>
          ))}
          <button
            type="button"
            data-theme-toggle
            aria-label="Toggle theme"
            class="ml-2 inline-flex h-9 w-9 items-center justify-center rounded-full border border-[var(--border)] text-xs transition hover:border-[var(--primary)] hover:text-[var(--primary)]"
          >
            T
          </button>
        </nav>
        <button
          type="button"
          class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-[var(--border)] text-sm md:hidden"
          data-menu-toggle
          aria-label="Toggle navigation"
        >
          Menu
        </button>
      </div>
      <div class="md:hidden" data-mobile-menu hidden>
        <div class="space-y-2 border-t border-[var(--border)] px-6 py-4 text-sm">
          {navLinks.map((link, index) => (
            <a
              href={link.href}
              data-nav-link
              data-section-id={link.id}
              class={`block rounded px-3 py-2 nav-link ${index === 0 ? "is-active" : ""}`.trim()}
              aria-current={index === 0 ? "true" : "false"}
            >
              {link.label}
            </a>
          ))}
          <button
            type="button"
            data-theme-toggle-mobile
            class="mt-2 inline-flex w-full items-center justify-center gap-2 rounded border border-[var(--border)] px-3 py-2 text-sm transition hover:border-[var(--primary)] hover:text-[var(--primary)]"
          >
            Toggle theme
          </button>
        </div>
      </div>
    </header>

    <main class="mx-auto max-w-5xl px-6 py-16 space-y-24">
      <slot />
    </main>

    <footer class="border-t border-[var(--border)] bg-[color-mix(in srgb,var(--bg) 88%,transparent)]">
      <div class="mx-auto flex max-w-5xl flex-col gap-4 px-6 py-10 text-sm text-muted md:flex-row md:items-center md:justify-between">
        <span>2025 Yefta Asyel. GPT-5 dengan Astro </span>
        <div class="flex gap-4">
          <a href="https://github.com/yeftakun" target="_blank" rel="noopener noreferrer">GitHub</a>
          <a href="https://www.linkedin.com" target="_blank" rel="noopener noreferrer">LinkedIn</a>
          <a href="https://steamcommunity.com" target="_blank" rel="noopener noreferrer">Steam</a>
        </div>
      </div>
    </footer>

    <script is:inline>
      const rootEl = document.documentElement;
      const toggles = document.querySelectorAll('[data-theme-toggle], [data-theme-toggle-mobile]');
      const mobileToggle = document.querySelector('[data-menu-toggle]');
      const mobileMenu = document.querySelector('[data-mobile-menu]');
      const sectionNodes = Array.from(document.querySelectorAll('[data-section]'));
      const navLinkNodes = Array.from(document.querySelectorAll('[data-nav-link]'));
      const navLinkMap = new Map();
      navLinkNodes.forEach((link) => {
        const id = link.getAttribute('data-section-id');
        if (!id) return;
        const group = navLinkMap.get(id) ?? [];
        group.push(link);
        navLinkMap.set(id, group);
      });

      const switchTheme = () => {
        const isDark = rootEl.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      };

      toggles.forEach((btn) => btn.addEventListener('click', switchTheme));

      const stored = localStorage.getItem('theme');
      const prefers = window.matchMedia('(prefers-color-scheme: dark)');
      const shouldDark = stored === 'dark' || (!stored && prefers.matches);
      rootEl.classList.toggle('dark', shouldDark);
      prefers.addEventListener('change', (event) => {
        if (!localStorage.getItem('theme')) {
          rootEl.classList.toggle('dark', event.matches);
        }
      });

      mobileToggle?.addEventListener('click', () => {
        const hidden = mobileMenu.hasAttribute('hidden');
        mobileMenu.toggleAttribute('hidden', !hidden);
      });

      if (sectionNodes.length) {
        let currentId = sectionNodes[0].id;

        const setActiveSection = (id) => {
          if (!id) return;
          currentId = id;
          sectionNodes.forEach((section) => {
            section.toggleAttribute('data-active', section.id === id);
          });
          navLinkMap.forEach((links, sectionId) => {
            const isActive = sectionId === id;
            links.forEach((link) => {
              link.classList.toggle('is-active', isActive);
              link.setAttribute('aria-current', isActive ? 'true' : 'false');
            });
          });
        };

        const intersectionObserver = new IntersectionObserver(
          (entries) => {
            const visible = entries
              .filter((entry) => entry.isIntersecting)
              .sort((a, b) => b.intersectionRatio - a.intersectionRatio);
            if (!visible.length) return;
            const top = visible[0];
            const nextId = top.target.id;
            if (nextId && nextId !== currentId) {
              setActiveSection(nextId);
            }
          },
          { threshold: [0.3, 0.5, 0.7] }
        );

        sectionNodes.forEach((section) => {
          if (section.id === currentId) {
            section.setAttribute('data-active', '');
          }
          intersectionObserver.observe(section);
        });

        const handleHashChange = () => {
          const targetId = window.location.hash.replace('#', '');
          if (targetId && navLinkMap.has(targetId)) {
            setActiveSection(targetId);
          }
        };

        window.addEventListener('hashchange', handleHashChange);
        handleHashChange();
      }
    </script>
  </body>
</html>
